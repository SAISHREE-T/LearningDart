Certainly! Here are some notes covering functions, loops, control flow, print statements, operators, and constructors in Dart:

### Functions:
- **Definition:**

  returnType functionName(parameters) {
    // Function body
  }

- Dart functions can be named or anonymous (lambda functions).
- Functions can have parameters and return a value.
- `void` is used as the return type if the function doesn't return anything.

### Loops:
1. **`for` Loop:**

   for (initialization; condition; update) {
     // Loop body
   }


2. **`while` Loop:**
  
   while (condition) {
     // Loop body
   }


3. **`do-while` Loop:**
   
   do {
     // Loop body
   } while (condition);
  

### Control Flow:
- **`if` Statement:**

  if (condition) {
    // Code if the condition is true
  } else {
    // Code if the condition is false
  }
 

- **`switch` Statement:**

  switch (variable) {
    case value1:
      // Code for value1
      break;
    case value2:
      // Code for value2
      break;
    default:
      // Default code
  }


### Print Statements:
- **Printing to Console:**

  print("Hello, Dart!");
  

### Operators:
- **Arithmetic Operators:** `+`, `-`, `*`, `/`, `%`
- **Comparison Operators:** `==`, `!=`, `<`, `>`, `<=`, `>=`
- **Logical Operators:** `&&`, `||`, `!`
- **Assignment Operators:** `=`, `+=`, `-=`, `*=`, `/=`


### Classes in Dart:

1. **Class Declaration:**
   - A class is a blueprint for creating objects.
   - Dart supports both named and anonymous classes.

   ```dart
   class MyClass {
     // Class members and methods go here
   }
   ```

2. **Attributes (Fields):**
   - Attributes represent the state of an object.
   - Use `var` or specify the data type.

   ```dart
   class Person {
     String name;
     int age;

     // Constructor
     Person(this.name, this.age);
   }
   ```

3. **Methods:**
   - Methods define the behavior of an object.

   ```dart
   class Dog {
     void bark() {
       print("Woof! Woof!");
     }
   }
   ```

4. **Constructors:**
   - Constructors initialize the attributes when an object is created.
   -They don't return anything.
   -They have the same name as the class.
Constructors:
Parameterized Constructor:


ClassName(this.parameter1, this.parameter2);
Named Constructor:


ClassName.namedConstructor(this.parameter);
Default Constructor:

If no constructor is provided, Dart automatically adds a default constructor.
   


5. **Inheritance:**
   - Dart supports single inheritance.

   
   class Animal {
     void makeSound() {
       print("Some generic sound");
     }
   }

   class Cat extends Animal {
     @override
     void makeSound() {
       print("Meow!");
     }
   }
  

6. **Encapsulation:**
   - Use private attributes and methods with an underscore (`_`) before the name.

   class BankAccount {
     double _balance;

     // Getter
     double get balance => _balance;

     // Setter
     set balance(double value) {
       if (value >= 0) {
         _balance = value;
       }
     }
   }
  

### Records in Dart 

1. **Declaration:**
   - Records are used for immutable data.
   - Introduced using the `record` keyword.

  
   record Point(int x, int y);
   

2. **Features:**
   - Automatically generates equality (`==`), hashCode, and toString methods.
   - Named parameters are used for named constructors.

   
   record Person {
     String name;
     int age;

     // Named Constructor
     Person.adult({required this.name}) : age = 18;
   }
  

3. **Usage:**
   - Create records using the `const` keyword.

 
   void main() {
     const myPoint = Point(0, 0);
     print(myPoint); // Output: Point{x: 0, y: 0}
   }
   

